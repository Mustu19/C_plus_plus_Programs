#include<iostream>
#include<vector>
using namespace std;

/*
STANDARD TEMPLATE LIBRARY
LIBRARY OF GENERIC CLASSES AND FUNCTIONS
WHY USE STL? 1 . REUSE : WELL TESTED COMPONENTS
             2. TIME SAVING CODE
            3. USE THE CODE/FUNCTIONS DIRECTLY BY LIBRARY FUNCTIONS
COMPONENTS OF STL : 1) CONTAINERS - USE TEMPLATE CLASSES AND STORES DATA
2) ALGORITHMS - SORT, SEARCH, MERGE (USE TEMPLATE FUNCTIONS DIRECTLY) (PROCEDURE TO PROCESS DATA)
3) ITERATORS - IT IS A OBJECT POINTS TO AN ELEMENT IN A CONTAINER , 
               HANDLES JUST LIKE POINTERS , CONNECTS ALGO. WITH CONTAINERS

CONTAINERS TYPES  : 
1) SEQUENCE CONTAINERS - STORES DATA IN LINEAR FASHION . EG: VECTOR, LIST, DEQUEUE
2) ASSOCIATIVE CONTAINERS - DIRECT ACCESS, USED IN FAST SEARCHING, FAST DELETION ETC . EG: SET/MULTISET, MAP/MULTIMAP
3) DERIVED CONTAINERS - REAL WORLD MODELLING EG. STACK, QUEUE, PRIORITY QUEUE

WHEN TO USE WHICH:
-> SEQUENCE: 1.VECTOR - RANDOM ACCESS FAST , INSERT/DELETE SLOW, INSERTION AT THE END IS FASTER
          2. LIST - RM SLOW ,INSERTION/DELETION AT MIDDLE IS FAST, INSERTION/DELETION AT END IS FAST
-> ASSOCIATIVE: 1. ALL OPERATIONS FAST EXCEPT RANDOM ACCESS
-> DERIVED: DEPENDS WHICH OPERATION IS FASTER AND SLOWER, BY DATA STRUCTURE WE CAN KNOW THE OPEARTION FAST/SLOW .



*/
void display(vector<int> &v){
    for (int i = 0; i < v.size(); i++)
    {
        cout<<v[i]<<" " ;
    }
    
}

int main()
{
 vector<int> vec;
 int element;
 for (int i = 0; i < 4; i++)
 {
    cout<<"Enter element "<<i+1;
    cin>>element;    
    vec.push_back(element);
 }
 // vec.pop_back();
 vector<int> :: iterator iter = vec.begin() ;
 vec.insert(iter+1 , 3 , 45);
 display(vec);
 
 return 0;
}